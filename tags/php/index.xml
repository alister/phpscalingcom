<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on PHP Scaling</title><link>https://phpscaling.com/tags/php/</link><description>Recent content in php on PHP Scaling</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2008–2023, Alister Bulman; all rights reserved</copyright><lastBuildDate>Wed, 19 Sep 2018 21:42:44 +0000</lastBuildDate><atom:link href="https://phpscaling.com/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Speeding up your tests, and also your code coverage!</title><link>https://phpscaling.com/post/speeding-up-your-tests/</link><pubDate>Wed, 19 Sep 2018 21:42:44 +0000</pubDate><guid>https://phpscaling.com/post/speeding-up-your-tests/</guid><description>
Slow running tests are a bug - they stop you from doing as much as you can with your code, &amp;amp; its quality. Spend a little time working on making your tests better, clearer, and faster - and you'll reap rewards from your work.
I've had a couple of useful improvements in the time spent running my PHPunit tests recently.
First was avoiding setting up the database in each test, and using the Alice library (via AliceBundle) to pre-create at least the majority of the data my tests will need.</description></item><item><title>SncRedis and tagged services</title><link>https://phpscaling.com/post/sncredis-and-tagged-services/</link><pubDate>Wed, 27 Sep 2017 14:17:47 +0000</pubDate><guid>https://phpscaling.com/post/sncredis-and-tagged-services/</guid><description>
In early 2016, I suggested an addition to the SncRedis-bundle. The project itself is an fully-featured add-on ('bundle') for Symfony framework projects to easily do a number of very useful interface functions between Symfony and the Redis database/cache. It can, for example, quickly enable all the sessions to be put into a Redis server, and also cache the Doctrine meta-information as well as anything else that the developer would like to cache.</description></item><item><title>Improve your code coverage percentage - delete code!</title><link>https://phpscaling.com/post/improve-your-code-coverage-percentage-delete-code/</link><pubDate>Mon, 04 Sep 2017 12:14:17 +0000</pubDate><guid>https://phpscaling.com/post/improve-your-code-coverage-percentage-delete-code/</guid><description>
A recent post showed how to setup Code Tombstones - but there are other , even more insidious pieces of code in a project. The code you know you aren't using now, but you wrote ahead of time - because you think it will be useful, or you have plans for it, or any one of a dozen more reasons.
Chances are - you might never get back to it, and it's just taking up important space.</description></item><item><title>PHP-in-London list</title><link>https://phpscaling.com/post/php-in-london-list/</link><pubDate>Tue, 29 Aug 2017 10:27:18 +0000</pubDate><guid>https://phpscaling.com/post/php-in-london-list/</guid><description>
While Twitter can be really annoying, sometimes it can help to promote some wonderfully simple ideas.
One of these came from Andrew Woods (@awoods) - a github repo called php-in-seattle. It's a simple idea - just a list of companies around a geographical area that use PHP.
What it can enable is of mutual advantage to the companies, and developers that might be looking for a new job. So, I started a similar list for the London (UK) area.</description></item><item><title>Code Tombstones</title><link>https://phpscaling.com/post/code-tombstones/</link><pubDate>Mon, 28 Aug 2017 18:43:06 +0000</pubDate><guid>https://phpscaling.com/post/code-tombstones/</guid><description>
Version 0.9 of scheb/tombstone autoloads a file with a tombstone() function. See the bottom of the post for a fix to override that in your own code.
In a large project - particularly one in a dynamic language like PHP, as a project gets bigger maintaining full control of the code can be difficult. New features are written, old ones are changed or deprecated. Sometimes code is left behind, unneeded in later versions, but still in the code-base.</description></item><item><title>Replacing @expectedException with $this->expectException()</title><link>https://phpscaling.com/post/replacing-expectedexception-with-this-expectexception/</link><pubDate>Tue, 08 Aug 2017 18:59:44 +0000</pubDate><guid>https://phpscaling.com/post/replacing-expectedexception-with-this-expectexception/</guid><description>
One of the advantages of a side-project is that you can be a little extra passionate about getting things just right. If you want to increase code coverage because you think that it's good, you can - after all, it's just some time now doing things that you like.
So, earlier in the year, when I saw Sebastian Bergmann's article on 'Questioning PHPUnit Best Practices', I added it to a little (well, it currently stands at a count of 20 items.</description></item><item><title>Doing the work elsewhere - Adding a job to the queue</title><link>https://phpscaling.com/post/doing-the-work-elsewhere-adding-a-job-to-the-queue/</link><pubDate>Tue, 06 Oct 2009 22:30:26 +0000</pubDate><guid>https://phpscaling.com/post/doing-the-work-elsewhere-adding-a-job-to-the-queue/</guid><description>
I've previously shown you why you may want to put some tasks through a queuing system, what sort of jobs you could define, plus how to keep a worker process running for as long as you would like (but still be mindful of problems that happen).
In this post, I'll show you how to put the messages into the queue, and we'll also make a start on reading them back out.</description></item><item><title>Doing the work elsewhere - Sidebar - running the worker</title><link>https://phpscaling.com/post/doing-the-work-elsewhere-sidebar-running-the-worker/</link><pubDate>Tue, 23 Jun 2009 21:19:33 +0000</pubDate><guid>https://phpscaling.com/post/doing-the-work-elsewhere-sidebar-running-the-worker/</guid><description>
I'm taking a slight diversion now, to show you how the main worker processor runs. There are two parts to it - the actual worker, written in PHP, and the script that keeps running it.
For testing with return from the worker, we'll just return a random number. In order to avoid returning a normally used exit value, I've picked a few numbers for our controls, up around the 100 range.</description></item><item><title>Doing the work elsewhere - Asynchronous Message Queues</title><link>https://phpscaling.com/post/doing-the-work-elsewhere-asynchronous-message-queues/</link><pubDate>Wed, 10 Jun 2009 15:43:29 +0000</pubDate><guid>https://phpscaling.com/post/doing-the-work-elsewhere-asynchronous-message-queues/</guid><description>
The use of Beanstalkd as a queueing system What is an asynchronous queue The classic wikipedia quote (Message queue)
In computer science, message queues and mailboxes are software-engineering components used for interprocess communication, or for inter-thread communication within the same process. They use a queue for messaging - the passing of control or of content. Group communication systems provide similar kinds of functionality.
So one part of a system puts a message into a queue for another part to read from, and then act upon.</description></item><item><title>Upcoming posts - keep watching</title><link>https://phpscaling.com/post/upcoming-posts-keep-watching/</link><pubDate>Tue, 02 Jun 2009 10:28:55 +0000</pubDate><guid>https://phpscaling.com/post/upcoming-posts-keep-watching/</guid><description>
Just a quick note on what is going to be posted in the next few weeks – I've got a few significant pieces in mind for various topics – including:
Doing the work elsewhere – asynchronous queues This is going to be a series of articles – and to support it, I'm rewriting some code that I had originally wrote for my last job (v2, and so significantly improved over the original).</description></item><item><title>I laugh at your ZCE exam prep tests #2</title><link>https://phpscaling.com/post/i-laugh-at-your-zce-exam-prep-tests-2/</link><pubDate>Sat, 30 May 2009 14:20:23 +0000</pubDate><guid>https://phpscaling.com/post/i-laugh-at-your-zce-exam-prep-tests-2/</guid><description>
Back at the PHP London Conference at the end of February, iBuildings was offering a little test, with prize for people that could do well answering the sort of questions that are on the ZCE exam. Never one to turn down something useful for free, I took ten minutes to answer the eight questions. A few weeks later, I get an email from them/Zend to say I'd won the chance to take an exam – ZCE, or ZFE (Zend Framework).</description></item><item><title>Riddled me that</title><link>https://phpscaling.com/post/riddled-me-that/</link><pubDate>Thu, 24 Apr 2008 19:56:18 +0000</pubDate><guid>https://phpscaling.com/post/riddled-me-that/</guid><description>
Well go figure. I’ve just won $50 (Canadian, that’s about $3000 USD by now) of books and ‘stuff’ from PHP Arch, care of its publisher, Marco Tabini's, blog.
He’d put a little puzzle up last night, some long numbers, and a few short. I recognised them as almost ISBNs – it wasn’t hard to figure them as having dropped a zero from the front, making them “php|architect’s Guide to Programming with Zend Framework” and “php|architect’s Zend PHP 5 Certification Study Guide, 2nd Edition”.</description></item><item><title>Always have up to date documentation, part #2</title><link>https://phpscaling.com/post/always-have-up-to-date-documentation-part-2/</link><pubDate>Mon, 24 Mar 2008 15:38:28 +0000</pubDate><guid>https://phpscaling.com/post/always-have-up-to-date-documentation-part-2/</guid><description>
see my previous post on the topic, #1.
My last post ended up more as a how-to than what-to. This time, I'll say why you should have local copies of the documentation for most of the tools you use. I'll also tell you the sort of things I always have handy as well.
Getting a local copy of php.net - and getting installed as an apache vhost and updated (probably weekly) is some effort, but well worth it.</description></item><item><title>Know thy tools first of all</title><link>https://phpscaling.com/post/know-thy-tools-first-of-all/</link><pubDate>Mon, 17 Mar 2008 20:09:22 +0000</pubDate><guid>https://phpscaling.com/post/know-thy-tools-first-of-all/</guid><description>
When you have a library, like PEAR or Zend Framework – or even just the whole PHP language library – it’s absolutely vital you know what it can do.
What you don’t know can cost you weeks of effort and pain. I found this out (again) today, but it’s not my pain – it’s an employee who was too busy deciding that the Zend Framework wasn’t suitable for a simple cron-script task, he has spent most of the last few weeks duplicating something that is not as good as what I could write – with ZF – in about an hour.</description></item><item><title>Always have up to date documentation, part #1</title><link>https://phpscaling.com/post/always-have-up-to-date-documentation-part-1/</link><pubDate>Sun, 16 Mar 2008 23:41:00 +0000</pubDate><guid>https://phpscaling.com/post/always-have-up-to-date-documentation-part-1/</guid><description>
As I mentioned in my second post, ZCE prep – and dumb tests - about open book tests (like Brainbench), having a copy of all the relevant documentation can be incredibly useful, if only from a speed issue. Knowing you can just open a new tab and type a few words to get the information on a function, or concept from the manual takes away so many problems.
I mentioned there that I have a local copy of the main PHP manual – and I wanted to tell you how I keep it, and a couple of other manuals up to date, as well as other documentation.</description></item><item><title>ZCE prep - practice test #1</title><link>https://phpscaling.com/post/zce-prep-practice-test-1-2/</link><pubDate>Thu, 13 Mar 2008 21:33:00 +0000</pubDate><guid>https://phpscaling.com/post/zce-prep-practice-test-1-2/</guid><description>
Well, I've just completed the PHP Arch 'Vulcan' practice test – the first of up to five such practice tests I've purchased. I have quite deliberately not gone through what study materials I have on hand before I took this test (I wanted to get a baseline), but none the less got an 'EXCELLENT' final score, and the same 'Excellent' on seven of the twelve sections the pre-test is broken down into.</description></item><item><title>A useful idea for helping to enforce PHP code standards</title><link>https://phpscaling.com/post/a-useful-idea-for-helping-to-enforce-php-code-standards/</link><pubDate>Tue, 11 Mar 2008 17:16:57 +0000</pubDate><guid>https://phpscaling.com/post/a-useful-idea-for-helping-to-enforce-php-code-standards/</guid><description>
A more recent tool to use I'd suggest using phpcsfixer with one of the default coding standards - PSR-12/PER-Coding-style or @Symfony.
Extending PHP_CodeSniffer by Raphael Stolt shows how to quite easily add to a tool that will report what parts of your PHP source needs a clean-up, from the built in 'sniffs' for coding standards, and now adding to that for some slightly more opinionated choices on the maximum number of lines per function, or functions per class.</description></item><item><title>ZCE prep - and dumb tests</title><link>https://phpscaling.com/post/zce-prep-and-dumb-tests-2/</link><pubDate>Mon, 10 Mar 2008 21:55:00 +0000</pubDate><guid>https://phpscaling.com/post/zce-prep-and-dumb-tests-2/</guid><description>
This week I'm going to take the first of my PHPArch.com's ZCE prep test – then I'll read the book and see they they expect me to know.
Going for the Zend Certification is something I've been thinking of doing for a couple of years, and especially now that it covers PHP5 – and increasingly good practices and security topics. It's not that I need to get the ZCE, I'd go for it , for the intellectual challenge if nothing else.</description></item></channel></rss>