<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP Scaling</title>
    <link>https://www.phpscaling.com/</link>
    <description>Recent content on PHP Scaling</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2023, Alister Bulman; all rights reserved</copyright>
    <lastBuildDate>Mon, 12 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.phpscaling.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Investigating RedisGraph</title>
      <link>https://www.phpscaling.com/post/investigating-redisgraph/</link>
      <pubDate>Thu, 06 Dec 2018 13:31:44 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/investigating-redisgraph/</guid>
      <description>
        
          
            Thus far, I&#39;ve not done anything serious with much more with database like Mysql, some Postgres and on the NoSql side MongoDB (with a frisson of some use of Redis for some barely-more-than basic things), but I saw some mention of using RedisGraph PHP Client back in late October, as part of my regular scan of the packagist feed for new PHP/Composer packages.
The &#39;kjdev/redis-graph&#39; package is the first example of an interface library to RedisGraph - an extension module to Redis that became possible with Redis 4.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Speeding up your tests, and also your code coverage!</title>
      <link>https://www.phpscaling.com/post/speeding-up-your-tests/</link>
      <pubDate>Wed, 19 Sep 2018 21:42:44 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/speeding-up-your-tests/</guid>
      <description>
        
          
            Slow running tests are a bug - they stop you from doing as much as you can with your code, &amp;amp; its quality. Spend a little time working on making your tests better, clearer, and faster - and you&#39;ll reap rewards from your work.
I&#39;ve had a couple of useful improvements in the time spent running my PHPunit tests recently.
First was avoiding setting up the database in each test, and using the Alice library (via AliceBundle) to pre-create at least the majority of the data my tests will need.
          
          
        
      </description>
    </item>
    
    <item>
      <title>SncRedis and tagged services</title>
      <link>https://www.phpscaling.com/post/sncredis-and-tagged-services/</link>
      <pubDate>Wed, 27 Sep 2017 14:17:47 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/sncredis-and-tagged-services/</guid>
      <description>
        
          
            In early 2016, I suggested an addition to the SncRedis-bundle. The project itself is an fully-featured add-on (&#39;bundle&#39;) for Symfony framework projects to easily do a number of very useful interface functions between Symfony and the Redis database/cache. It can, for example, quickly enable all the sessions to be put into a Redis server, and also cache the Doctrine meta-information as well as anything else that the developer would like to cache.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Improve your code coverage percentage - delete code!</title>
      <link>https://www.phpscaling.com/post/improve-your-code-coverage-percentage-delete-code/</link>
      <pubDate>Mon, 04 Sep 2017 12:14:17 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/improve-your-code-coverage-percentage-delete-code/</guid>
      <description>
        
          
            A recent post showed how to setup Code Tombstones - but there are other , even more insidious pieces of code in a project. The code you know you aren&#39;t using now, but you wrote ahead of time - because you think it will be useful, or you have plans for it, or any one of a dozen more reasons.
Chances are - you might never get back to it, and it&#39;s just taking up important space.
          
          
        
      </description>
    </item>
    
    <item>
      <title>PHP-in-London list</title>
      <link>https://www.phpscaling.com/post/php-in-london-list/</link>
      <pubDate>Tue, 29 Aug 2017 10:27:18 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/php-in-london-list/</guid>
      <description>
        
          
            While Twitter can be really annoying, sometimes it can help to promote some wonderfully simple ideas.
One of these came from Andrew Woods (@awoods) - a github repo called php-in-seattle. It&#39;s a simple idea - just a list of companies around a geographical area that use PHP.
What it can enable is of mutual advantage to the companies, and developers that might be looking for a new job. So, I started a similar list for the London (UK) area.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code Tombstones</title>
      <link>https://www.phpscaling.com/post/code-tombstones/</link>
      <pubDate>Mon, 28 Aug 2017 18:43:06 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/code-tombstones/</guid>
      <description>
        
          
            Version 0.9 of scheb/tombstone autoloads a file with a tombstone() function. See the bottom of the post for a fix to override that in your own code.
In a large project - particularly one in a dynamic language like PHP, as a project gets bigger maintaining full control of the code can be difficult. New features are written, old ones are changed or deprecated. Sometimes code is left behind, unneeded in later versions, but still in the code-base.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Replacing @expectedException with $this-&gt;expectException()</title>
      <link>https://www.phpscaling.com/post/replacing-expectedexception-with-this-expectexception/</link>
      <pubDate>Tue, 08 Aug 2017 18:59:44 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/replacing-expectedexception-with-this-expectexception/</guid>
      <description>
        
          
            One of the advantages of a side-project is that you can be a little extra passionate about getting things just right. If you want to increase code coverage because you think that it&#39;s good, you can - after all, it&#39;s just some time now doing things that you like.
So, earlier in the year, when I saw Sebastian Bergmann&#39;s article on &#39;Questioning PHPUnit Best Practices&#39;, I added it to a little (well, it currently stands at a count of 20 items.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Upgrading PHPunit - fixing PHPUnit_Util_DeprecatedFeature_Logger</title>
      <link>https://www.phpscaling.com/post/upgrading-phpunit-fixing-phpunit_util_deprecatedfeature_logger/</link>
      <pubDate>Thu, 11 Jun 2015 13:04:07 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/upgrading-phpunit-fixing-phpunit_util_deprecatedfeature_logger/</guid>
      <description>
        
          
            Having just watched Sebastian Bergmann&#39;s &amp;quot;The State of PHPUnit&amp;quot; presentation from Fosdem 2015, I was inspired to install and test a project of mine with the latest stable PHPUnit - v4.7. It was easily installed on the command line.
composer global require &amp;quot;phpunit/phpunit&amp;quot;
I installed it as a new, global, tool because in my project I am using the &amp;quot;ibuildings/qa-tools&amp;quot; repository to install and help run a number of QA tools - and the stable 1.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Recently....</title>
      <link>https://www.phpscaling.com/post/recently/</link>
      <pubDate>Tue, 03 Apr 2012 11:03:33 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/recently/</guid>
      <description>
        
          
            It&#39;s been one of those quiet spots around here for a while, so here&#39;s the catch-up on what has been happening while I was not posting.
I&#39;ve recently finished a short contract working with an agency, Transform (part of the Engine group) working with a couple of government departments. The Office Of The Public Guardian receives, checks and stores Lasting Powers of Attorney - a legal document that you write while still mentally compentant to say what you would like to happen should the worst occur, and by whom you want to do it.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Hire quickly: Addendum, recruiters</title>
      <link>https://www.phpscaling.com/post/hire-quickly-addendum-recruiters/</link>
      <pubDate>Mon, 09 Jan 2012 17:32:22 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/hire-quickly-addendum-recruiters/</guid>
      <description>
        
          
            Recruiters: Here&#39;s the rules.
The first recruiter to tell me the company name, and then send the job-spec gets to forward my details - if I think it&#39;s interesting. No company name, or spec, no chance If you send my details without my OK, you lose. And I tell the company you are a loser (chances are, they are too). Sending me all the information I could want to know is good - but when you do it on spec (and probably en-mass as well), does not mean that you get to claim the bounty.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Hire quickly, because your competitors will.</title>
      <link>https://www.phpscaling.com/post/hire-quickly-because-your-competitors-will/</link>
      <pubDate>Thu, 05 Jan 2012 13:11:01 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/hire-quickly-because-your-competitors-will/</guid>
      <description>
        
          
            If you aren&#39;t taking hiring seriously - other people can, and do hire the people you need.
I&#39;ve been guilty of it before - leaving it a couple of days - or even a week before getting back to someone that sent in their CV - although of course, most of the time, it didn&#39;t matter. The person wasn&#39;t going to get hired because they were just not good enough (the generally poor quality of developers is a different rant).
          
          
        
      </description>
    </item>
    
    <item>
      <title>Jailbreaking your Kindle, and putting new &#39;screensaver&#39; images</title>
      <link>https://www.phpscaling.com/post/jailbreaking-your-kindle-and-putting-new-screensaver-images/</link>
      <pubDate>Tue, 27 Dec 2011 15:16:40 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/jailbreaking-your-kindle-and-putting-new-screensaver-images/</guid>
      <description>
        
          
            A quick fun post for those of you with an Amazon Kindle - some instructions on how to a) jailbreak your reader (trivially easy), and then b) put your own wallpapers on there, so you get a more interesting &#39;screensaver&#39;.
It&#39;s really easy, no more than 20 mins and a couple of reboots/software updates. Most of the time is literally waiting for the reader to restart after you&#39;ve placed a file in the base directory.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Booze at tech meetups</title>
      <link>https://www.phpscaling.com/post/booze-at-meetups/</link>
      <pubDate>Tue, 13 Dec 2011 17:12:48 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/booze-at-meetups/</guid>
      <description>
        
          
            I was out last night at the The Big Xmas [bash] #, near Silicon Roundabout. It was a fun night out meeting various people, tech, business and recruiters. Oh, the shame though - I was wearing the same T-shirt as someone else - and, yes, I have indeed replaced people with small shell scripts.
Now, to the main part of what this post is about - the rant. It&#39;s not aimed at the particular event last night alone though.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Deployment with Capistrano - the Gotchas</title>
      <link>https://www.phpscaling.com/post/deployment-with-capistrano-the-gotchas/</link>
      <pubDate>Thu, 24 Nov 2011 12:16:59 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/deployment-with-capistrano-the-gotchas/</guid>
      <description>
        
          
            Capistrano, makes deployment of code easy. If you need to do a number of additional steps as well, then the fact that they can be scripted and run automatically is a huge win.
If you&#39;ve only got a single machine (or maybe two), then you could certainly write your own quite simple, and entirely workable system - I described something just like this in a previous post: &amp;quot;SVN checkouts vs exports for live versions&amp;quot;.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Back from the coalface</title>
      <link>https://www.phpscaling.com/post/back-from-the-coalface/</link>
      <pubDate>Wed, 23 Nov 2011 11:48:46 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/back-from-the-coalface/</guid>
      <description>
        
          
            I&#39;ve been pretty busy in the last couple of years, first at Binweevils and in 2011, PeerIndex - hence the utter lack of posts, but as the note on my personal CV site says, I&#39;m taking some time off between looking for my next role. This does give the opportunity to write more of PHP Scaling and the tools around development that I&#39;ve been using in the last couple of years, and that have been piquing my curiosity.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Doing the work elsewhere - Adding a job to the queue</title>
      <link>https://www.phpscaling.com/post/doing-the-work-elsewhere-adding-a-job-to-the-queue/</link>
      <pubDate>Tue, 06 Oct 2009 22:30:26 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/doing-the-work-elsewhere-adding-a-job-to-the-queue/</guid>
      <description>
        
          
            I&#39;ve previously shown you why you may want to put some tasks through a queuing system, what sort of jobs you could define, plus how to keep a worker process running for as long as you would like (but still be mindful of problems that happen).
In this post, I&#39;ll show you how to put the messages into the queue, and we&#39;ll also make a start on reading them back out.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Doing the work elsewhere - Sidebar - running the worker</title>
      <link>https://www.phpscaling.com/post/doing-the-work-elsewhere-sidebar-running-the-worker/</link>
      <pubDate>Tue, 23 Jun 2009 21:19:33 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/doing-the-work-elsewhere-sidebar-running-the-worker/</guid>
      <description>
        
          
            I&#39;m taking a slight diversion now, to show you how the main worker processor runs. There are two parts to it - the actual worker, written in PHP, and the script that keeps running it.
For testing with return from the worker, we&#39;ll just return a random number. In order to avoid returning a normally used exit value, I&#39;ve picked a few numbers for our controls, up around the 100 range.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Doing the work elsewhere - Asynchronous Message Queues</title>
      <link>https://www.phpscaling.com/post/doing-the-work-elsewhere-asynchronous-message-queues/</link>
      <pubDate>Wed, 10 Jun 2009 15:43:29 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/doing-the-work-elsewhere-asynchronous-message-queues/</guid>
      <description>
        
          
            The use of Beanstalkd as a queueing system What is an asynchronous queue The classic wikipedia quote (Message queue)
In computer science, message queues and mailboxes are software-engineering components used for interprocess communication, or for inter-thread communication within the same process. They use a queue for messaging - the passing of control or of content. Group communication systems provide similar kinds of functionality.
So one part of a system puts a message into a queue for another part to read from, and then act upon.
          
          
        
      </description>
    </item>
    
    <item>
      <title>($me instanceOf ZCE) === true</title>
      <link>https://www.phpscaling.com/post/me-instanceof-zce-true/</link>
      <pubDate>Sat, 06 Jun 2009 11:50:00 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/me-instanceof-zce-true/</guid>
      <description>
        
          
            Phew. That would have been embarrassing if I&#39;d not passed my ZCE on Thursday afternoon (Jun 4th, 2009).
          
          
        
      </description>
    </item>
    
    <item>
      <title>Upcoming posts - keep watching</title>
      <link>https://www.phpscaling.com/post/upcoming-posts-keep-watching/</link>
      <pubDate>Tue, 02 Jun 2009 10:28:55 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/upcoming-posts-keep-watching/</guid>
      <description>
        
          
            Just a quick note on what is going to be posted in the next few weeks – I&#39;ve got a few significant pieces in mind for various topics – including:
Doing the work elsewhere – asynchronous queues This is going to be a series of articles – and to support it, I&#39;m rewriting some code that I had originally wrote for my last job (v2, and so significantly improved over the original).
          
          
        
      </description>
    </item>
    
    <item>
      <title>I laugh at your ZCE exam prep tests #2</title>
      <link>https://www.phpscaling.com/post/i-laugh-at-your-zce-exam-prep-tests-2/</link>
      <pubDate>Sat, 30 May 2009 14:20:23 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/i-laugh-at-your-zce-exam-prep-tests-2/</guid>
      <description>
        
          
            Back at the PHP London Conference at the end of February, iBuildings was offering a little test, with prize for people that could do well answering the sort of questions that are on the ZCE exam. Never one to turn down something useful for free, I took ten minutes to answer the eight questions. A few weeks later, I get an email from them/Zend to say I&#39;d won the chance to take an exam – ZCE, or ZFE (Zend Framework).
          
          
        
      </description>
    </item>
    
    <item>
      <title>Riddled me that</title>
      <link>https://www.phpscaling.com/post/riddled-me-that/</link>
      <pubDate>Thu, 24 Apr 2008 19:56:18 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/riddled-me-that/</guid>
      <description>
        
          
            Well go figure. I’ve just won $50 (Canadian, that’s about $3000 USD by now) of books and ‘stuff’ from PHP Arch, care of its publisher, Marco Tabini&#39;s, blog.
He’d put a little puzzle up last night, some long numbers, and a few short. I recognised them as almost ISBNs – it wasn’t hard to figure them as having dropped a zero from the front, making them “php|architect’s Guide to Programming with Zend Framework” and “php|architect’s Zend PHP 5 Certification Study Guide, 2nd Edition”.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Always have up to date documentation, part #2</title>
      <link>https://www.phpscaling.com/post/always-have-up-to-date-documentation-part-2/</link>
      <pubDate>Mon, 24 Mar 2008 15:38:28 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/always-have-up-to-date-documentation-part-2/</guid>
      <description>
        
          
            see my previous post on the topic, #1.
My last post ended up more as a how-to than what-to. This time, I&#39;ll say why you should have local copies of the documentation for most of the tools you use. I&#39;ll also tell you the sort of things I always have handy as well.
Getting a local copy of php.net - and getting installed as an apache vhost and updated (probably weekly) is some effort, but well worth it.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Know thy tools first of all</title>
      <link>https://www.phpscaling.com/post/know-thy-tools-first-of-all/</link>
      <pubDate>Mon, 17 Mar 2008 20:09:22 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/know-thy-tools-first-of-all/</guid>
      <description>
        
          
            When you have a library, like PEAR or Zend Framework – or even just the whole PHP language library – it’s absolutely vital you know what it can do.
What you don’t know can cost you weeks of effort and pain. I found this out (again) today, but it’s not my pain – it’s an employee who was too busy deciding that the Zend Framework wasn’t suitable for a simple cron-script task, he has spent most of the last few weeks duplicating something that is not as good as what I could write – with ZF – in about an hour.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Always have up to date documentation, part #1</title>
      <link>https://www.phpscaling.com/post/always-have-up-to-date-documentation-part-1/</link>
      <pubDate>Sun, 16 Mar 2008 23:41:00 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/always-have-up-to-date-documentation-part-1/</guid>
      <description>
        
          
            As I mentioned in my second post, ZCE prep – and dumb tests - about open book tests (like Brainbench), having a copy of all the relevant documentation can be incredibly useful, if only from a speed issue. Knowing you can just open a new tab and type a few words to get the information on a function, or concept from the manual takes away so many problems.
I mentioned there that I have a local copy of the main PHP manual – and I wanted to tell you how I keep it, and a couple of other manuals up to date, as well as other documentation.
          
          
        
      </description>
    </item>
    
    <item>
      <title>ZCE prep - practice test #1</title>
      <link>https://www.phpscaling.com/post/zce-prep-practice-test-1-2/</link>
      <pubDate>Thu, 13 Mar 2008 21:33:00 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/zce-prep-practice-test-1-2/</guid>
      <description>
        
          
            Well, I&#39;ve just completed the PHP Arch &#39;Vulcan&#39; practice test – the first of up to five such practice tests I&#39;ve purchased. I have quite deliberately not gone through what study materials I have on hand before I took this test (I wanted to get a baseline), but none the less got an &#39;EXCELLENT&#39; final score, and the same &#39;Excellent&#39; on seven of the twelve sections the pre-test is broken down into.
          
          
        
      </description>
    </item>
    
    <item>
      <title>A useful idea for helping to enforce PHP code standards</title>
      <link>https://www.phpscaling.com/post/a-useful-idea-for-helping-to-enforce-php-code-standards/</link>
      <pubDate>Tue, 11 Mar 2008 17:16:57 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/a-useful-idea-for-helping-to-enforce-php-code-standards/</guid>
      <description>
        
          
            A more recent tool to use I&#39;d suggest using phpcsfixer with one of the default coding standards - PSR-12/PER-Coding-style or @Symfony.
Extending PHP_CodeSniffer by Raphael Stolt shows how to quite easily add to a tool that will report what parts of your PHP source needs a clean-up, from the built in &#39;sniffs&#39; for coding standards, and now adding to that for some slightly more opinionated choices on the maximum number of lines per function, or functions per class.
          
          
        
      </description>
    </item>
    
    <item>
      <title>ZCE prep - and dumb tests</title>
      <link>https://www.phpscaling.com/post/zce-prep-and-dumb-tests-2/</link>
      <pubDate>Mon, 10 Mar 2008 21:55:00 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/zce-prep-and-dumb-tests-2/</guid>
      <description>
        
          
            This week I&#39;m going to take the first of my PHPArch.com&#39;s ZCE prep test – then I&#39;ll read the book and see they they expect me to know.
Going for the Zend Certification is something I&#39;ve been thinking of doing for a couple of years, and especially now that it covers PHP5 – and increasingly good practices and security topics. It&#39;s not that I need to get the ZCE, I&#39;d go for it , for the intellectual challenge if nothing else.
          
          
        
      </description>
    </item>
    
    <item>
      <title>svn checkouts vs exports for live versions</title>
      <link>https://www.phpscaling.com/post/svn-checkouts-vs-exports-for-live-versions/</link>
      <pubDate>Sun, 09 Mar 2008 19:45:30 +0000</pubDate>
      
      <guid>https://www.phpscaling.com/post/svn-checkouts-vs-exports-for-live-versions/</guid>
      <description>
        
          
            I&#39;ve read http://www.svn-checkout.co.uk/2008/01/19/how-to-release-new-versions-of-websites/ via http://www.lornajane.net/posts/2008/SVN-Deployment-and-a-New-Site and while I consider revision control an essential tool (a few years ago, my job was the only one in the previous five years where I didn&#39;t have to install my own RCS), I somewhat disagree on the idea they suggest.
That first link, &#39;how to release new versions of websites&#39;, suggests checking out a version of the site as a working copy, (it&#39;s certainly something I&#39;ve done before now), but then it goes on to use the &#39;svn switch&#39; capability to move between versions (of course, they are also doing in in TortoiseSvn, and there for the live web-server is likely to be running Windows, no way I&#39;d run a server on Windows - not even for testing).
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
